### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AcceptFriendshipPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: User
  viewer: User
}

type AddDesiredSkillMutationPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Skill
  viewer: User
}

type AddSkillMutationPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Skill
  viewer: User
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

type Chat implements Node {
  channelName: String!
  id: ID!
  lastOpenedAt: DateTime!
  messages(after: String, before: String, first: Int, last: Int, offset: Int): ChatMessageConnection!
  newMessagesCount: Int!
  opened: Boolean!
  updatedAt: DateTime!
  users(after: String, before: String, first: Int, last: Int, where: UserWhereInput): UserConnection!
}

type ChatConnection implements Connection {
  edges: [ChatEdge!]!
  nodes: [Chat!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ChatEdge implements ConnectionEdge {
  cursor: String!
  node: Chat!
}

type ChatMessage implements Node {
  chat: Chat!
  chatId: String!
  content: [Json!]!
  createdAt: DateTime!
  id: ID!
  sender: User!
  senderId: String!
}

type ChatMessageConnection implements Connection {
  edges: [ChatMessageEdge!]!
  nodes: [ChatMessage!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ChatMessageCreateInput {
  content: [Json!]!
}

type ChatMessageEdge implements ConnectionEdge {
  cursor: String!
  node: ChatMessage!
}

input ChatMessageWhereInput {
  chatId: String!
  id: StringNullableFilter
}

input ChatWhereInput {
  id: StringNullableFilter
  user: UserWhereInput
}

input ChatWhereUniqueInput {
  id: String
}

type CodeExample implements Node {
  author: User!
  authorName: String!
  comments(after: String, before: String, first: Int, last: Int, orderBy: CommentOrderByInput, where: CommentWhereInput): CommentConnection!
  content: String!
  createdAt: DateTime!
  description: String
  id: ID!
  language: CodeLanguage!
  languageColor: String!
  primarySkill: Skill!
  primarySkillId: String!
  skills(after: String, before: String, first: Int, last: Int, orderBy: SkillOrderByInput, where: SkillWhereInput): SkillConnection!
  title: String!
  updatedAt: DateTime!
  upvoters(after: String, before: String, first: Int, last: Int, where: UserWhereInput): UserConnection!
  upvotes: Int!
  urlSlug: String!

  """
  How the viwer has voted on this code exmaple.
  
  true: upvoted
  false: downvoted
  null: didn't vote
  """
  viewerUpvote: Boolean
}

input CodeExampleAuthorNameUrlSlugCompoundUniqueInput {
  authorName: String!
  urlSlug: String!
}

type CodeExampleConnection implements Connection {
  edges: [CodeExampleEdge!]!
  nodes: [CodeExample!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input CodeExampleCreateInput {
  content: String!
  description: String
  language: CodeLanguage!
  primarySkill: SkillWhereUniqueInput
  skills: [SkillWhereUniqueInput!]!
  title: String!
}

type CodeExampleEdge implements ConnectionEdge {
  cursor: String!
  node: CodeExample!
}

input CodeExampleOrderByInput {
  authorName: SortOrder
  createdAt: SortOrder
  language: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

type CodeExampleTitleTakenError implements MutationError {
  message: String!
  path: [String!]!
}

input CodeExampleUpdateInput {
  content: String
  description: String
  language: CodeLanguage
  primarySkill: SkillWhereUniqueInput
  skills: [SkillWhereUniqueInput!]
}

input CodeExampleWhereInput {
  authorName: StringNullableFilter
  createdAt: DateTimeNullableFilter
  language: CodeLanguageNullableFilter
  title: StringNullableFilter
  updatedAt: DateTimeNullableFilter
  urlSlug: StringNullableFilter
}

input CodeExampleWhereUniqueInput {
  authorName_urlSlug: CodeExampleAuthorNameUrlSlugCompoundUniqueInput
  id: String
}

enum CodeLanguage {
  Go
  GraphQL
  HTML
  JavaScript
  Python
  SCSS
  SQL
  TypeScript
  YAML
}

input CodeLanguageNullableFilter {
  equals: CodeLanguage
  in: [CodeLanguage!]
  not: CodeLanguageNullableFilter
  notIn: [CodeLanguage!]
}

type Comment implements Node {
  author: User
  authorId: String
  codeExample: CodeExample
  codeExampleId: String
  content: [Json!]
  createdAt: DateTime!
  downvoters(after: String, before: String, first: Int, last: Int, where: UserWhereInput): UserConnection!
  id: ID!
  parent: Comment
  parentId: String
  post: Post
  postId: String
  replies(after: String, before: String, first: Int, last: Int, orderBy: CommentOrderByInput, where: CommentWhereInput): CommentConnection!
  repliesCount: Int!
  updatedAt: DateTime!
  upvoters(after: String, before: String, first: Int, last: Int, where: UserWhereInput): UserConnection!
  upvotes: Int!

  """
  How the viewer has voted on this comment.
  
  true: upvoted
  false: downvoted
  null: didn't vote
  """
  viewerUpvote: Boolean
}

input CommentCodeExampleInput {
  codeExample: CodeExampleWhereUniqueInput!
  content: [Json!]!
  parent: CommentWhereUniqueInput
}

type CommentCodeExamplePayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Comment
  viewer: User
}

"""Relay-style connection for Comment types."""
type CommentConnection implements Connection {
  edges: [CommentEdge!]!
  nodes: [Comment!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Relay-style edge for Comment types."""
type CommentEdge implements ConnectionEdge {
  cursor: String!
  node: Comment!
}

input CommentOrderByInput {
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CommentPostInput {
  content: [Json!]!
  parent: CommentWhereUniqueInput
  post: PostWhereUniqueInput!
}

type CommentPostPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Comment
  viewer: User
}

input CommentUpdateInput {
  content: [Json!]
}

input CommentWhereInput {
  author: UserWhereInput
  authorId: StringNullableFilter
  codeExample: CodeExampleWhereInput
  codeExampleId: StringNullableFilter
  createdAt: DateTimeNullableFilter
  post: PostWhereInput
  postId: StringNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CommentWhereUniqueInput {
  id: String
}

interface Connection {
  pageInfo: PageInfo!
  totalCount: Int!
}

interface ConnectionEdge {
  cursor: String!
}

input CreateChatInput {
  message: [Json!]!
  users: UserWhereInput!
}

type CreateChatPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Chat
  viewer: User
}

type CreateCodeExamplePayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: CodeExample
  viewer: User
}

type CreateExperiencePayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Experience
  viewer: User
}

type CreatePostPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Post
  viewer: User
}

type CreateRepositoryPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Repository
  viewer: User
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeNullableFilter {
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
}

type DeleteCodeExamplePayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: CodeExample
  viewer: User
}

type DeleteCommentPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Comment
  viewer: User
}

type DeleteExperiencePayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Experience
  viewer: User
}

type DeleteFriendshipPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: User
  viewer: User
}

type DeletePostPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Post
  viewer: User
}

type DeleteRepositoryPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Repository
  viewer: User
}

type DeleteUserPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: User
  viewer: User
}

type DownvoteCommentPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Comment
  viewer: User
}

input EnumExperienceTypeNullableFilter {
  equals: ExperienceType
  in: [ExperienceType!]
  notIn: [ExperienceType!]
}

type Experience implements Node {
  endDate: DateTime
  highlights: [String!]!
  id: ID!
  location: String
  organization: Organization!
  organizationName: String!
  positionName: String!
  startDate: DateTime!
  type: ExperienceType
  user: User!
  userId: String!
}

"""Relay-style connection for Experience types."""
type ExperienceConnection implements Connection {
  edges: [ExperienceEdge!]!
  nodes: [Experience!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ExperienceCreateInput {
  endDate: DateTime
  highlights: [String!]
  location: String
  organizationName: String!
  positionName: String!
  startDate: DateTime!
  type: ExperienceType
}

"""Relay-style edge for Experience types."""
type ExperienceEdge implements ConnectionEdge {
  cursor: String!
  node: Experience!
}

input ExperienceOrderByInput {
  endDate: SortOrder
  startDate: SortOrder
}

enum ExperienceType {
  Contract
  FullTime
  Intern
  OpenSource
  PartTime
}

input ExperienceUpdateInput {
  endDate: DateTime
  highlights: [String!]
  location: String
  organizationName: String
  positionName: String
  startDate: DateTime
  type: ExperienceType
}

input ExperienceWhereInput {
  organizationName: StringNullableFilter
  positionName: StringNullableFilter
  type: EnumExperienceTypeNullableFilter
  user: UserWhereInput
  userId: String
}

input ExperienceWhereUniqueInput {
  id: String!
}

type Follow implements Node {
  createdAt: DateTime!
  follower: User!
  following: Followable!
  id: ID!
  type: FollowType!
  user: User!
  userId: String!
}

type FollowConnection implements Connection {
  edges: [FollowEdge!]!
  nodes: [Follow!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FollowEdge implements ConnectionEdge {
  cursor: String!
  node: Follow!
}

input FollowOrderByInput {
  createdAt: SortOrder
  type: SortOrder
}

type FollowSkillPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Skill
  viewer: User
}

enum FollowType {
  Skill
  User
}

type FollowUserPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: User
  viewer: User
}

input FollowWhereInput {
  skill: SkillWhereInput
  type: FollowType
  user: UserWhereInput
}

input FollowWhereUniqueInput {
  id: String
}

interface Followable {
  viewerFollowing: Boolean!
}

type Friendship implements Node {
  friender: User!
  frienderId: String!
  friending: User!
  friendingId: String!
  id: ID!
  rejected: Boolean!
  rejectedAt: DateTime
  updatedAt: DateTime!
}

input FriendshipWhereUniqueInput {
  id: String
}

type GitHub {
  repository(where: GitHubRepositoryWhereUniqueInput!): GitHubRepository
  repositoryOwner(where: GitHubRepositoryOwnerWhereUniqueInput!): GitHubRepositoryOwner
  viewer: GitHubUser
}

type GitHubLanguage {
  color: String
  id: String!
  name: String!
}

type GitHubLicense {
  description: String
  id: String!
  name: String!
  nickname: String
  spdxId: String
  url: URL
}

type GitHubOrganization implements GitHubRepositoryOwner {
  avatarUrl: URL!
  description: String
  experiencers(after: String, before: String, first: Int, last: Int, where: UserWhereInput): UserConnection!
  id: String!
  login: String!
  name: String
  organization: Organization!
  repositories(after: String, before: String, first: Int, last: Int): GitHubRepositoryConnection!
  twitterUsername: String
  url: URL!
  websiteUrl: String
}

type GitHubRepository {
  description: String
  forkCount: Int!
  id: String!
  issueCount: Int!
  licenseInfo: GitHubLicense
  name: String!
  owner: GitHubRepositoryOwner!
  primaryLanguage: GitHubLanguage
  pullRequestCount: Int!
  pushedAt: DateTime
  repository: Repository
  skill: Skill
  stargazerCount: Int!
  url: URL!
}

type GitHubRepositoryConnection implements Connection {
  edges: [GitHubRepositoryEdge!]!
  nodes: [GitHubRepository!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type GitHubRepositoryEdge implements ConnectionEdge {
  cursor: String!
  node: GitHubRepository!
}

interface GitHubRepositoryOwner {
  avatarUrl: URL!
  experiencers(after: String, before: String, first: Int, last: Int, where: UserWhereInput): UserConnection!
  id: String!
  login: String!
  repositories(after: String, before: String, first: Int, last: Int): GitHubRepositoryConnection!
  url: URL!
}

input GitHubRepositoryOwnerWhereUniqueInput {
  login: String!
}

input GitHubRepositoryWhereUniqueInput {
  name: String!
  owner: String!
}

"""Data for a user from that user's connected GitHub account."""
type GitHubUser implements GitHubRepositoryOwner {
  avatarUrl: URL!
  bio: String
  company: String
  contributionCalendar: GitHubUserContributionCalendar!
  experiencers(after: String, before: String, first: Int, last: Int, where: UserWhereInput): UserConnection!
  id: String!
  login: String!
  name: String
  repositories(after: String, before: String, first: Int, last: Int): GitHubRepositoryConnection!
  topLanguages: TopLanguages!
  totalCommits(where: GitHubUserTotalCommitsWhereInput): Int!
  twitterUsername: String
  url: URL!
  user: User!
  websiteUrl: String
}

type GitHubUserContributionCalendar {
  totalContributions: Int!
  weeks: [GitHubUserContributionCalendarWeek!]!
}

type GitHubUserContributionCalendarDay {
  contributionCount: Int!
  contributionLevel: GitHubUserContributionLevel!
  date: DateTime!
  weekday: Int!
}

type GitHubUserContributionCalendarWeek {
  contributionDays: [GitHubUserContributionCalendarDay!]!
  firstDay: DateTime!
}

enum GitHubUserContributionLevel {
  FirstQuartile
  FourthQuartile
  None
  SecondQuartile
  ThirdQuartile
}

input GitHubUserTotalCommitsWhereInput {
  createdAt: DateTimeNullableFilter
}

type InvalidSkillError implements MutationError {
  message: String!
  path: [String!]!
}

input InviteToChatInput {
  users: UserWhereInput!
}

type InviteToChatPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Chat
  viewer: User
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type LeaveChatPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Chat
  viewer: User
}

"""Root mutation type"""
type Mutation {
  acceptFriendship(where: UserWhereUniqueInput!): AcceptFriendshipPayload!
  addDesiredSkill(where: SkillWhereUniqueInput!): AddDesiredSkillMutationPayload!
  addSkill(where: SkillWhereUniqueInput!): AddSkillMutationPayload!
  commentCodeExample(data: CommentCodeExampleInput!): CommentCodeExamplePayload!
  commentPost(data: CommentPostInput!): CommentPostPayload!
  createChat(data: CreateChatInput!): CreateChatPayload!
  createCodeExample(data: CodeExampleCreateInput!): CreateCodeExamplePayload!
  createExperience(data: ExperienceCreateInput!): CreateExperiencePayload!

  """
  Creates a new draft if the user doesn't have a draft pending to be published already
  """
  createPost: CreatePostPayload!
  createRepository(data: RepositoryCreateInput!): CreateRepositoryPayload!
  deleteCodeExample(where: CodeExampleWhereUniqueInput!): DeleteCodeExamplePayload!
  deleteComment(where: CommentWhereUniqueInput!): DeleteCommentPayload!

  """Users can delete their own experiences."""
  deleteExperience(where: ExperienceWhereUniqueInput!): DeleteExperiencePayload!
  deleteFriendship(where: UserWhereUniqueInput!): DeleteFriendshipPayload!

  """Users can delete their own posts."""
  deletePost(where: PostWhereUniqueInput!): DeletePostPayload!
  deleteRepository(where: RepositoryWhereUniqueInput!): DeleteRepositoryPayload!
  deleteUser: DeleteUserPayload!
  followSkill(where: SkillWhereUniqueInput!): FollowSkillPayload!
  followUser(where: UserWhereUniqueInput!): FollowUserPayload!
  inviteToChat(data: InviteToChatInput!, where: ChatWhereUniqueInput!): InviteToChatPayload!
  leaveChat(where: ChatWhereUniqueInput!): LeaveChatPayload!
  ok: Boolean!
  openChat(where: ChatWhereUniqueInput!): OpenChatPayload!
  openMessages: OpenMessagesPayload!
  openNotifications: OpenNotificationsPayload!
  publishPost(data: PostPublishInput!, where: PostWhereUniqueInput!): PublishPostPayload!
  rejectFriendship(where: UserWhereUniqueInput!): RejectFriendshipPayload!
  removeDesiredSkill(where: SkillWhereUniqueInput!): RemoveDesiredSkillMutationPayload!
  removePostThumbnail(where: PostWhereUniqueInput!): RemovePostThumbnailPayload!
  removeSkill(where: SkillWhereUniqueInput!): RemoveSkillMutationPayload!
  requestFriendship(where: UserWhereUniqueInput!): RequestFriendshipPayload!
  sendChatMessage(data: ChatMessageCreateInput!, where: ChatWhereUniqueInput!): SendChatMessagePayload!
  unfollowSkill(where: SkillWhereUniqueInput!): UnfollowSkillPayload!
  unfollowUser(where: UserWhereUniqueInput!): UnfollowUserPayload!
  unvoteCodeExample(where: CodeExampleWhereUniqueInput!): UnvoteCodeExamplePayload!
  unvoteComment(where: CommentWhereUniqueInput!): UnvoteCommentPayload!
  unvotePost(where: PostWhereUniqueInput!): UnvotePostPayload!
  updateCodeExample(data: CodeExampleUpdateInput!, where: CodeExampleWhereUniqueInput!): UpdateCodeExamplePayload!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): UpdateCommentPayload!
  updateDesiredSkills(data: UpdateDesiredSkillsInput!): UpdateDesiredSkillsPayload!
  updateExperience(data: ExperienceUpdateInput!, where: ExperienceWhereUniqueInput!): UpdateExperiencePayload!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): UpdatePostPayload!
  updatePostDraft(data: PostDraftUpdateInput!, where: PostWhereUniqueInput!): UpdatePostDraftPayload!
  updateRepository(data: RepositoryUpdateInput!, where: RepositoryWhereUniqueInput!): UpdateRepositoryPayload!
  updateSkills(data: UpdateSkillsInput!): UpdateSkillsPayload!
  updateUserFromGitHub: UpdateUserFromGitHubPayload!
  uploadPostImage(data: UploadPostImageInput!, where: PostWhereUniqueInput!): UploadPostImagePayload!
  upvoteCodeExample(data: UpvoteCodeExampleInput, where: CodeExampleWhereUniqueInput!): UpvoteCodeExamplePayload!
  upvoteComment(data: UpvoteCommentInput, where: CommentWhereUniqueInput!): UpvoteCommentPayload!
  upvotePost(where: PostWhereUniqueInput!): UpvotePostPayload!
  viewPost(where: PostWhereUniqueInput!): ViewPostPayload!
  viewer: User
}

interface MutationError {
  message: String!
  path: [String!]!
}

interface MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Node
  viewer: User
}

interface Node {
  id: ID!
}

interface Notification implements Node {
  id: ID!
  opened: Boolean!
  type: NotificationType!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type NotificationChatMessageReceived implements Node & Notification {
  chat: Chat!
  chatId: String!
  id: ID!
  opened: Boolean!
  type: NotificationType!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type NotificationCodeExampleCommented implements Node & Notification {
  codeExample: CodeExample!
  codeExampleId: String!
  id: ID!
  opened: Boolean!
  type: NotificationType!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type NotificationConnection implements Connection {
  edges: [NotificationEdge!]!
  nodes: [Notification!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NotificationEdge implements ConnectionEdge {
  cursor: String!
  node: Notification!
}

type NotificationFriendshipAccepted implements Node & Notification {
  friendship: Friendship!
  friendshipId: String!
  id: ID!
  opened: Boolean!
  type: NotificationType!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type NotificationPostCommented implements Node & Notification {
  id: ID!
  opened: Boolean!
  post: Post!
  postId: String!
  type: NotificationType!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

enum NotificationType {
  ChatMessageReceived
  CodeExampleCommented
  FriendshipAccepted
  PostCommented
}

input NotificationWhereInput {
  opened: Boolean
}

type OpenChatPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Chat
  viewer: User
}

type OpenMessagesPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: User
  viewer: User
}

type OpenNotificationsPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: User
  viewer: User
}

input OrderByRelationAggregateInput {
  _count: SortOrder
}

type Organization implements Node {
  experiences: [Experience!]!
  github: GitHubOrganization!
  id: ID!
  name: String!
}

"""Page info for relay-style pagination connections."""
type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post implements Node {
  author: User!
  authorName: String!
  comments(after: String, before: String, first: Int, last: Int, orderBy: CommentOrderByInput, where: CommentWhereInput): CommentConnection!
  content: [Json!]!
  createdAt: DateTime!
  description: String
  downvoters(after: String, before: String, first: Int, last: Int, where: UserWhereInput): UserConnection!
  id: ID!
  images: [PostImage!]!
  publishedAt: DateTime

  """
  Estimated time in minutes it will take to read this post. Minimum 1 minute.
  """
  readTime: Int!
  skills(after: String, before: String, first: Int, last: Int, where: SkillWhereInput): SkillConnection!
  thumbnailUrl: String
  title: String!
  updatedAt: DateTime!
  upvoters(after: String, before: String, first: Int, last: Int, where: UserWhereInput): UserConnection!
  upvotes: Int!
  urlSlug: String!

  """
  How the viewer has voted on this post.
  
  true: upvoted
  false: downvoted
  null: didn't vote
  """
  viewerUpvote: Boolean
  viewers(after: String, before: String, first: Int, last: Int, where: UserWhereInput): UserConnection!
  viewersCount: Int!
}

input PostAuthorNameUrlSlugCompoundUniqueInput {
  authorName: String!
  urlSlug: String!
}

"""Relay-style connection for Post types."""
type PostConnection implements Connection {
  edges: [PostEdge!]!
  nodes: [Post!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PostDraftUpdateInput {
  content: [Json!]
  description: String
  skills: [SkillWhereUniqueInput!]
  thumbnailUrl: String
  title: String
}

"""Relay-style edge for Post types."""
type PostEdge implements ConnectionEdge {
  cursor: String!
  node: Post!
}

type PostImage implements Node {
  id: ID!
  post: Post!
  postId: String!
  url: String!
}

input PostOrderByInput {
  publishedAt: SortOrder
  upvoters: OrderByRelationAggregateInput
}

input PostPublishInput {
  content: [Json!]!
  description: String!
  skills: [SkillWhereUniqueInput!]!
  thumbnailUrl: String
  title: String!
}

input PostUpdateInput {
  content: [Json!]
  description: String
  skills: [SkillWhereUniqueInput!]
  thumbnailUrl: String
}

input PostWhereInput {
  author: UserWhereInput
  authorName: StringNullableFilter
  publishedAt: DateTimeNullableFilter
  skills: SkillListRelationFilter
  urlSlug: StringNullableFilter
}

input PostWhereUniqueInput {
  authorName_urlSlug: PostAuthorNameUrlSlugCompoundUniqueInput
  id: String
}

type PublishPostPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Post
  viewer: User
}

"""Root query type"""
type Query {
  activityFeed(after: String, before: String, first: Int, last: Int, where: UserActivityWhereInput): UserActivityConnection!
  chat(where: ChatWhereUniqueInput!): Chat

  """This is to update a subscribed chat with new messages when received."""
  chatMessages(where: ChatMessageWhereInput!): [ChatMessage!]!
  codeExample(where: CodeExampleWhereUniqueInput!): CodeExample
  codeExamples(after: String, before: String, first: Int, last: Int, orderBy: [CodeExampleOrderByInput!], where: CodeExampleWhereInput!): CodeExampleConnection!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(after: String, before: String, first: Int, last: Int, orderBy: CommentOrderByInput, where: CommentWhereInput): CommentConnection!
  experiences(after: String, before: String, first: Int, last: Int, orderBy: [ExperienceOrderByInput!], where: ExperienceWhereInput): ExperienceConnection!

  """Relay-style connection on Skill types."""
  followableSkills(after: String, before: String, first: Int, last: Int, orderBy: [SkillOrderByInput!], where: SkillWhereInput): SkillConnection!
  github: GitHub!
  ok: Boolean!

  """A user-created post."""
  post(where: PostWhereUniqueInput!): Post
  postDraft: Post

  """Relay-style connection on Post types."""
  posts(after: String, before: String, first: Int, last: Int, orderBy: [PostOrderByInput!], where: PostWhereInput): PostConnection!
  repositories(after: String, before: String, first: Int, last: Int, where: RepositoryWhereInput): RepositoryConnection!
  skill(where: SkillWhereUniqueInput!): Skill

  """Relay-style connection on Skill types."""
  skills(after: String, before: String, first: Int, last: Int, orderBy: [SkillOrderByInput!], where: SkillWhereInput): SkillConnection!
  suggestFriends(after: String, first: Int, where: SuggestFriendsWhereInput!): UserConnection!
  suggestOrganizations(first: Int, where: SuggestOrganizationsWhereInput!): SuggestOrganizations!
  suggestRepositories(first: Int, where: SuggestRepositoriesWhereInput!): SuggestRepositories!
  suggestSkillOwners(first: Int, where: SuggestSkillOwnersWhereInput!): SuggestSkillOwners!
  suggestSkills(first: Int, where: SuggestSkillsWhereInput!): SuggestSkills!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: [UserOrderByInput!], where: UserWhereInput): UserConnection!
  viewer: User
}

type RejectFriendshipPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: User
  viewer: User
}

type RemoveDesiredSkillMutationPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Skill
  viewer: User
}

type RemovePostThumbnailPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Post
  viewer: User
}

type RemoveSkillMutationPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Skill
  viewer: User
}

type Repository implements Node & WithGitHubRepository {
  github: GitHubRepository!
  id: ID!
  name: String!
  owner: String!
  skills: [Skill!]!
  user: User!
}

"""Relay-style connection for Repository types."""
type RepositoryConnection implements Connection {
  edges: [RepositoryEdge!]!
  nodes: [Repository!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input RepositoryCreateInput {
  name: String!
}

"""Relay-style edge for Repository type"""
type RepositoryEdge implements ConnectionEdge {
  cursor: String!
  node: Repository!
}

input RepositoryNameOwnerCompoundUniqueInput {
  name: String!
  owner: String!
}

input RepositoryUpdateInput {
  skills: [SkillWhereUniqueInput!]
}

input RepositoryWhereInput {
  name: StringNullableFilter
  owner: StringNullableFilter
  user: UserWhereInput
}

input RepositoryWhereUniqueInput {
  id: String
  name_owner: RepositoryNameOwnerCompoundUniqueInput
}

type RequestFriendshipPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: User
  viewer: User
}

type SendChatMessagePayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: ChatMessage
  viewer: User
}

type Skill implements Followable & Node & WithGitHubRepository {
  codeExamples(after: String, before: String, first: Int, last: Int, orderBy: [CodeExampleOrderByInput!], where: CodeExampleWhereInput): CodeExampleConnection!
  desiringUsers(after: String, before: String, first: Int, last: Int, where: UserWhereInput): UserConnection!
  followers(after: String, before: String, first: Int, last: Int, where: UserWhereInput): UserConnection!
  followersCount: Int!
  github: GitHubRepository!
  id: ID!
  name: String!
  owner: String!
  posts(after: String, before: String, first: Int, last: Int, where: PostWhereInput): PostConnection!
  users(after: String, before: String, first: Int, last: Int, where: UserWhereInput): UserConnection!
  viewerDesiredSkill: Boolean!
  viewerFollowing: Boolean!
  viewerSkill: Boolean!
}

type SkillConnection implements Connection {
  edges: [SkillEdge!]!
  nodes: [Skill!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SkillEdge implements ConnectionEdge {
  cursor: String!
  node: Skill!
}

input SkillListRelationFilter {
  every: SkillWhereInput
  none: SkillWhereInput
  some: SkillWhereInput
}

input SkillNameOwnerCompoundUniqueInput {
  name: String!
  owner: String!
}

input SkillOrderByInput {
  desiringUsers: OrderByRelationAggregateInput
  name: SortOrder
  owner: SortOrder
  users: OrderByRelationAggregateInput
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
  name: StringNullableFilter
  owner: StringNullableFilter
}

input SkillWhereUniqueInput {
  id: String
  name_owner: SkillNameOwnerCompoundUniqueInput
}

enum SortOrder {
  Asc
  Desc
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  in: [String!]
  not: StringNullableFilter
  notIn: [String!]
  startsWith: String
}

input SuggestFriendsWeightsInput {
  desiredSkillsOverlap: Float = 1
  skillsOverlap: Float = 1
}

input SuggestFriendsWhereInput {
  """
  The min % overlap of suggested users' skills to the viewer's desired-skills.
  
  This is clamped to [0, 1], and is 0 by default.
  """
  desiredSkillsThreshold: Float = 0

  """
  Each suggested user's scoring metric (for ordering), can be randomly reduced by a % which is the jitter. The larger the jitter, the more random the results can be.
  
  This is clamped to [0, 1], and is 0.15 by default.
  """
  jitter: Float = 0.15

  """
  Seeds the jitter, so that pagination will be deterministic on the same seed.
  
  If not provided, the results will be non-deterministically random.
  """
  jitterSeed: DateTime

  """Filters suggested users by their known skills."""
  skills: SkillWhereInput

  """
  The min % overlap of suggested users' skills to the viewer's skills.
  
  This is clamped to [0, 1], and is 0 by default.
  """
  skillsThreshold: Float = 0
  weights: SuggestFriendsWeightsInput = {desiredSkillsOverlap: 1, skillsOverlap: 1}
}

type SuggestOrganizations {
  nodes: [GitHubOrganization!]!
  totalCount: Int!
}

input SuggestOrganizationsWhereInput {
  name: String!
}

type SuggestRepositories {
  nodes: [GitHubRepository!]!
  totalCount: Int!
}

input SuggestRepositoriesWhereInput {
  name: String!
}

type SuggestSkillOwners {
  nodes: [GitHubRepositoryOwner!]!
  totalCount: Int!
}

input SuggestSkillOwnersWhereInput {
  name: String!
}

type SuggestSkills {
  nodes: [GitHubRepository!]!
  totalCount: Int!
}

input SuggestSkillsWhereInput {
  name: String!
  owner: String
}

"""One of the most used languages by a user"""
type TopLanguage {
  """The color of the language, defined by GitHub"""
  color: String!

  """The name of the language."""
  name: String!

  """
  The sum of number of bytes written across all owned repositories in this language.
  """
  size: Int!
}

"""
The most used languages by a user, determined by number of bytes written to repositories owned by the user on GitHub.
"""
type TopLanguages {
  nodes: [TopLanguage!]!

  """The total number of languages across all owned repositories."""
  totalCount: Int!

  """
  The total number of bytes written across all owned repositories across all languages.
  """
  totalSize: Int!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type UnfollowSkillPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Skill
  viewer: User
}

type UnfollowUserPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: User
  viewer: User
}

type UnvoteCodeExamplePayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: CodeExample
  viewer: User
}

type UnvoteCommentPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Comment
  viewer: User
}

type UnvotePostPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Post
  viewer: User
}

type UpdateCodeExamplePayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: CodeExample
  viewer: User
}

type UpdateCommentPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Comment
  viewer: User
}

input UpdateDesiredSkillsInput {
  skills: [SkillWhereUniqueInput!]!
}

type UpdateDesiredSkillsPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: User
  viewer: User
}

type UpdateExperiencePayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Experience
  viewer: User
}

type UpdatePostDraftPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Post
  viewer: User
}

type UpdatePostPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Post
  viewer: User
}

type UpdateRepositoryPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Repository
  viewer: User
}

input UpdateSkillsInput {
  skills: [SkillWhereUniqueInput!]!
}

type UpdateSkillsPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: User
  viewer: User
}

type UpdateUserFromGitHubPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: User
  viewer: User
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadPostImageInput {
  """The file of the image to be uploaded"""
  image: Upload!
}

type UploadPostImagePayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: PostImage
  viewer: User
}

input UpvoteCodeExampleInput {
  upvote: Boolean
}

type UpvoteCodeExamplePayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: CodeExample
  viewer: User
}

input UpvoteCommentInput {
  upvote: Boolean
}

type UpvoteCommentPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Comment
  viewer: User
}

type UpvotePostPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Post
  viewer: User
}

type User implements Followable & Node {
  activities(after: String, before: String, first: Int, last: Int, where: UserActivityWhereInput): UserActivityConnection!
  activityFeed(after: String, before: String, first: Int, last: Int, where: UserActivityWhereInput): UserActivityConnection!
  chats(after: String, before: String, first: Int, last: Int, where: ChatWhereInput): ChatConnection!
  codeExamples(after: String, before: String, first: Int, last: Int, orderBy: [CodeExampleOrderByInput!], where: CodeExampleWhereInput): CodeExampleConnection!
  commentUpvotes: Int!
  comments(after: String, before: String, first: Int, last: Int, orderBy: CommentOrderByInput, where: CommentWhereInput): CommentConnection!
  createdAt: DateTime!
  description: String
  desiredSkills(after: String, before: String, first: Int, last: Int, orderBy: [SkillOrderByInput!], where: SkillWhereInput): SkillConnection!
  email: String!
  experiences(after: String, before: String, first: Int, last: Int, orderBy: ExperienceOrderByInput, where: ExperienceWhereInput): ExperienceConnection!
  followers(after: String, before: String, first: Int, last: Int, orderBy: FollowOrderByInput, where: UserWhereInput): UserConnection!
  followersCount: Int!
  following(after: String, before: String, first: Int, last: Int, orderBy: FollowOrderByInput, where: FollowWhereInput): FollowConnection!
  followingCount: Int!
  friendRequestsReceived(after: String, before: String, first: Int, last: Int, where: UserWhereInput): UserConnection!
  friendRequestsReceivedCount: Int!
  friendRequestsSent(after: String, before: String, first: Int, last: Int, where: UserWhereInput): UserConnection!
  friends(after: String, before: String, first: Int, last: Int, where: UserWhereInput): UserConnection!
  friendsCount: Int!
  github: GitHubUser!
  githubUrl: URL!
  id: ID!
  image: String
  messagesLastOpenedAt: DateTime!
  name: String!
  newMessagesCount: Int!
  newNotificationsCount: Int!
  notifications(after: String, before: String, first: Int, last: Int, where: NotificationWhereInput): NotificationConnection!
  notificationsLastOpenedAt: DateTime!
  postUpvotes: Int!
  postViews: Int!
  posts(after: String, before: String, first: Int, last: Int, where: PostWhereInput): PostConnection!
  repositories(after: String, before: String, first: Int, last: Int, where: RepositoryWhereInput): RepositoryConnection!
  skills(after: String, before: String, first: Int, last: Int, orderBy: [SkillOrderByInput!], where: SkillWhereInput): SkillConnection!
  trophies: UserTrophies!

  """Code examples this user has upvoted"""
  upvotedCodeExamples(after: String, before: String, first: Int, last: Int, orderBy: [CodeExampleOrderByInput!], where: CodeExampleWhereInput): CodeExampleConnection!

  """Posts this user has upvoted"""
  upvotedPosts(after: String, before: String, first: Int, last: Int, where: PostWhereInput): PostConnection!
  viewerCanFriend: Boolean!
  viewerFollowing: Boolean!
  viewerFriended: Boolean!
  viewerIsFriend: Boolean!
}

interface UserActivity implements Node {
  id: ID!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type UserActivityCommentCodeExample implements Node & UserActivity {
  comment: Comment!
  commentId: String!
  id: ID!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type UserActivityCommentPost implements Node & UserActivity {
  comment: Comment!
  commentId: String!
  id: ID!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type UserActivityConnection implements Connection {
  edges: [UserActivityEdge!]!
  nodes: [UserActivity!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserActivityCreateCodeExample implements Node & UserActivity {
  codeExample: CodeExample!
  codeExampleId: String!
  id: ID!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type UserActivityEdge implements ConnectionEdge {
  cursor: String!
  node: UserActivity!
}

type UserActivityFollowSkill implements Node & UserActivity {
  follow: Follow!
  followId: String!
  id: ID!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type UserActivityFollowUser implements Node & UserActivity {
  follow: Follow!
  followId: String!
  id: ID!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type UserActivityFriendAcceptUser implements Node & UserActivity {
  friendship: Friendship!
  friendshipId: String!
  id: ID!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type UserActivityJoined implements Node & UserActivity {
  id: ID!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type UserActivityPublishPost implements Node & UserActivity {
  id: ID!
  post: Post!
  postId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

enum UserActivityType {
  CommentCodeExample
  CommentPost
  CreateCodeExample
  FollowSkill
  FollowUser
  FriendAcceptUser
  Joined
  PublishPost
  UpvoteCodeExample
  UpvotePost
}

type UserActivityUpvoteCodeExample implements Node & UserActivity {
  codeExample: CodeExample!
  codeExampleId: String!
  id: ID!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type UserActivityUpvotePost implements Node & UserActivity {
  id: ID!
  post: Post!
  postId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input UserActivityWhereInput {
  type: UserActivityType
  user: UserWhereInput
}

"""Relay-style connection for User types."""
type UserConnection implements Connection {
  edges: [UserEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Relay-style edge for User types."""
type UserEdge implements ConnectionEdge {
  cursor: String!
  node: User!
}

input UserOrderByInput {
  createdAt: SortOrder
  updatedAt: SortOrder
}

type UserTrophies {
  """The id of the user who these trophies belong to"""
  id: ID!
  totalFollowers: Int!
  totalPostViews: Int!
  totalSkills: Int!
  totalUpvotes: Int!
  totalYearlyCommits: Int!
  totalYearlyPosts: Int!
}

input UserWhereInput {
  id: StringNullableFilter
  name: StringNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  name: String
}

type ViewPostPayload implements MutationPayload {
  errors: [MutationError!]
  query: Query!
  record: Post
  viewer: User
}

interface WithGitHubRepository {
  github: GitHubRepository!
  name: String!
  owner: String!
}
