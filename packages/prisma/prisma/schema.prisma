// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "referentialIntegrity"]
}

generator erd {
  provider = "prisma-erd-generator"
  theme    = "default"
  output   = "../ERD.svg"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../docs"
}

model Account {
  access_token       String? @db.VarChar(512)
  expires_at         Int?
  id                 String  @id @default(cuid())
  id_token           String? @db.VarChar(512)
  provider           String  @db.VarChar(256)
  providerAccountId  String  @db.VarChar(256)
  oauth_token        String? @db.VarChar(512)
  oauth_token_secret String? @db.VarChar(512)
  refresh_token      String? @db.VarChar(512)
  scope              String? @db.VarChar(256)
  session_state      String? @db.VarChar(512)
  token_type         String? @db.VarChar(256)
  type               String  @db.VarChar(256)
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  expires      DateTime @db.DateTime(6)
  id           String   @id @default(cuid())
  sessionToken String   @unique @db.VarChar(768)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@index([userId])
}

model VerificationToken {
  expires    DateTime @db.DateTime(6)
  identifier String   @db.VarChar(512)
  token      String   @unique @db.VarChar(256)

  @@unique([identifier, token])
}

enum UserRole {
  Admin
  Moderator
  Member
}

model User {
  accounts                  Account[]
  activities                UserActivity[]
  banned                    Boolean                @default(false)
  chats                     ChatsOnUsers[]
  chatMessages              ChatMessage[]
  codeExamples              CodeExample[]
  comments                  Comment[]
  // When this account was registered
  createdAt                 DateTime               @default(now()) @db.DateTime(6)
  description               String?                @db.VarChar(512)
  desiredSkills             DesiredSkillsOnUsers[]
  email                     String                 @unique @db.VarChar(256)
  emailVerified             DateTime?              @db.DateTime(6)
  experiences               Experience[]
  followedBy                FollowUser[]           @relation("FollowingUser")
  followingSkill            FollowSkill[]
  followingUser             FollowUser[]           @relation("FollowerUser")
  follows                   Follow[]
  friendedBy                Friendship[]           @relation("FriendingUser")
  friending                 Friendship[]           @relation("FrienderUser")
  id                        String                 @id @default(cuid())
  // Avatar image, pulled from GitHub
  image                     String?                @db.VarChar(512)
  // When the user last opened their messages
  messagesLastOpenedAt      DateTime               @default(now()) @db.DateTime(6)
  // The GitHub name of the user
  name                      String                 @unique @db.VarChar(128)
  notifications             Notification[]         @relation()
  // When the user last opened their notifications
  notificationsLastOpenedAt DateTime               @default(now()) @db.DateTime(6)
  posts                     Post[]                 @relation("PostAuthor")
  repositories              Repository[]
  role                      UserRole               @default(Member)
  // Self written summary or description
  sessions                  Session[]
  skills                    SkillsOnUsers[]
  updatedAt                 DateTime               @updatedAt @db.DateTime(6)
  upvotedCodeExamples       CodeExampleUpvoter[]
  upvotedComments           CommentUpvoter[]
  upvotedPosts              PostUpvoter[]
  viewedPosts               PostViewer[]
}

enum UserActivityType {
  CommentCodeExample
  CommentPost
  CreateCodeExample
  FollowSkill
  FollowUser
  FriendAcceptUser
  Joined
  PublishPost
  UpvoteCodeExample
  UpvotePost
}

model UserActivity {
  id            String           @id @default(cuid())
  codeExample   CodeExample?     @relation(fields: [codeExampleId], references: [id], onDelete: Cascade)
  codeExampleId String?
  comment       Comment?         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId     String?
  follow        Follow?          @relation(fields: [followId], references: [id], onDelete: Cascade)
  followId      String?
  friendship    Friendship?      @relation(fields: [friendshipId], references: [id], onDelete: Cascade)
  friendshipId  String?
  post          Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String?
  skills        Skill[]
  type          UserActivityType
  updatedAt     DateTime         @updatedAt @db.DateTime(6)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  @@index([codeExampleId])
  @@index([commentId])
  @@index([followId])
  @@index([friendshipId])
  @@index([postId])
  @@index([userId])
}

enum NotificationType {
  ChatMessageReceived
  CodeExampleCommented
  FriendshipAccepted
  PostCommented
}

model Notification {
  id            String           @id @default(cuid())
  chat          Chat?            @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId        String?
  codeExample   CodeExample?     @relation(fields: [codeExampleId], references: [id], onDelete: Cascade)
  codeExampleId String?
  friendship    Friendship?      @relation(fields: [friendshipId], references: [id], onDelete: Cascade)
  friendshipId  String?
  post          Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String?
  type          NotificationType
  updatedAt     DateTime         @updatedAt @db.DateTime(6)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  @@index([chatId])
  @@index([codeExampleId])
  @@index([friendshipId])
  @@index([postId])
  @@index([userId])
}

// These are uni-directional match requests. If matched 2-way, then it is a confirmed match.
model Friendship {
  id            String         @id @default(cuid())
  activities    UserActivity[]
  friender      User           @relation("FrienderUser", fields: [frienderId], references: [id], onDelete: Cascade)
  frienderId    String
  friending     User           @relation("FriendingUser", fields: [friendingId], references: [id], onDelete: Cascade)
  friendingId   String
  notifications Notification[]
  rejectedAt    DateTime?      @db.DateTime(6)
  updatedAt     DateTime       @updatedAt @db.DateTime(6)

  @@unique([frienderId, friendingId])
  @@index([frienderId])
  @@index([friendingId])
}

enum FollowType {
  Skill
  User
}

model Follow {
  id             String         @id @default(cuid())
  activities     UserActivity[]
  createdAt      DateTime       @default(now()) @db.DateTime(6)
  followingSkill FollowSkill?
  followingUser  FollowUser?
  type           FollowType
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String

  @@index([userId])
}

// These are uni-directional follows. If matched 2-way, then the users are following each-other.
model FollowUser {
  id          String @id @default(cuid())
  follow      Follow @relation(fields: [followId], references: [id], onDelete: Cascade)
  followId    String @unique
  follower    User   @relation("FollowerUser", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("FollowingUser", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@unique([followerId, followingId])
  @@index([followId])
  @@index([followerId])
  @@index([followingId])
}

model FollowSkill {
  id          String @id @default(cuid())
  follow      Follow @relation(fields: [followId], references: [id], onDelete: Cascade)
  followId    String @unique
  follower    User   @relation(fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   Skill  @relation(fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@unique([followerId, followingId])
}

model Chat {
  id            String         @id @default(cuid())
  messages      ChatMessage[]
  notifications Notification[]
  users         ChatsOnUsers[]
  updatedAt     DateTime       @updatedAt @db.DateTime(6)
}

model ChatMessage {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  content   Json
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String
  createdAt DateTime @default(now()) @db.DateTime(6)

  @@index([senderId])
}

model ChatsOnUsers {
  id           String   @id @default(cuid())
  chat         Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  lastOpenedAt DateTime @default(now()) @db.DateTime(6)

  @@unique([chatId, userId])
  @@index([chatId])
  @@index([userId])
}

model Post {
  activities    UserActivity[]
  author        User            @relation(name: "PostAuthor", fields: [authorName], references: [name], onDelete: Cascade)
  authorName    String          @db.VarChar(128)
  comments      Comment[]
  content       Json?
  createdAt     DateTime        @default(now()) @db.DateTime(6)
  description   String?         @db.VarChar(512)
  id            String          @id @default(cuid())
  images        PostImage[]
  notifications Notification[]
  publishedAt   DateTime?       @db.DateTime(6)
  skills        SkillsOnPosts[]
  title         String          @default("Draft") @db.VarChar(128)
  thumbnailUrl  String?         @db.VarChar(512)
  updatedAt     DateTime        @updatedAt @db.DateTime(6)
  upvoters      PostUpvoter[]
  urlSlug       String          @default("draft") @db.VarChar(128)
  viewers       PostViewer[]

  @@unique([authorName, title])
  @@unique([authorName, urlSlug])
  @@index([authorName])
}

model PostViewer {
  id     String  @id @default(cuid())
  ip     String  @db.VarChar(128)
  post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  @@unique([ip, postId])
  @@index([userId])
}

model PostUpvoter {
  id     String  @id @default(cuid())
  post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  // Whether this is an upvote. If false, this is a downvote instead
  upvote Boolean @default(true)
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
}

model PostImage {
  id        String   @id
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  url       String   @unique @db.VarChar(512)
  createdAt DateTime @default(now()) @db.DateTime(6)

  @@index([postId])
}

model Comment {
  id            String           @id @default(cuid())
  activities    UserActivity[]
  author        User?            @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId      String?
  codeExample   CodeExample?     @relation(fields: [codeExampleId], references: [id], onDelete: Cascade)
  codeExampleId String?
  content       Json?
  createdAt     DateTime         @default(now()) @db.DateTime(6)
  parent        Comment?         @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId      String?
  post          Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String?
  replies       Comment[]        @relation("CommentReplies")
  updatedAt     DateTime         @updatedAt @db.DateTime(6)
  upvoters      CommentUpvoter[]

  @@index([authorId])
  @@index([codeExampleId])
  @@index([parentId])
  @@index([postId])
}

model CommentUpvoter {
  id        String  @id @default(cuid())
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  // Whether this is an upvote. If false, this is a downvote instead
  upvote    Boolean @default(true)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([commentId, userId])
  @@index([commentId])
  @@index([userId])
}

model Skill {
  activities          UserActivity[]
  codeExamples        SkillsOnCodeExamples[]
  desiringUsers       DesiredSkillsOnUsers[]
  followedBy          FollowSkill[]
  id                  String                 @id @default(cuid())
  name                String                 @db.VarChar(128)
  owner               String                 @db.VarChar(128)
  organization        Organization           @relation(fields: [owner], references: [name], onDelete: Cascade)
  posts               SkillsOnPosts[]
  primaryCodeExamples CodeExample[]
  repositories        SkillsOnRepositories[]
  users               SkillsOnUsers[]

  @@unique([name, owner])
  @@index([owner])
}

model SkillsOnCodeExamples {
  id            String      @id @default(cuid())
  codeExample   CodeExample @relation(fields: [codeExampleId], references: [id], onDelete: Cascade)
  codeExampleId String
  skill         Skill       @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId       String

  @@unique([skillId, codeExampleId])
  @@index([skillId])
}

model SkillsOnPosts {
  id      String @id @default(cuid())
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId String

  @@unique([skillId, postId])
  @@index([postId])
  @@index([skillId])
}

model SkillsOnUsers {
  id      String @id @default(cuid())
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@unique([skillId, userId])
  @@index([skillId])
  @@index([userId])
}

model DesiredSkillsOnUsers {
  id      String @id @default(cuid())
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@unique([skillId, userId])
  @@index([skillId])
  @@index([userId])
}

model Repository {
  id     String                 @id @default(cuid())
  name   String                 @db.VarChar(128)
  skills SkillsOnRepositories[]
  user   User                   @relation(fields: [owner], references: [name], onDelete: Cascade)
  owner  String                 @db.VarChar(128)

  @@unique([name, owner])
  @@index([owner])
}

model SkillsOnRepositories {
  id           String     @id @default(cuid())
  skill        Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId      String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String

  @@unique([skillId, repositoryId])
  @@index([skillId])
  @@index([repositoryId])
}

model Organization {
  id          String       @id @default(cuid())
  name        String       @unique @db.VarChar(128)
  experiences Experience[]
  skills      Skill[]
}

enum ExperienceType {
  FullTime
  PartTime
  Contract
  Intern
  OpenSource
}

model Experience {
  id               String          @id @default(cuid())
  // When this experience was ended. Null is assumed as present.
  endDate          DateTime?       @db.DateTime(3)
  highlights       Json
  location         String?         @db.VarChar(256)
  organization     Organization    @relation(fields: [organizationName], references: [name], onDelete: Cascade)
  organizationName String          @db.VarChar(256)
  positionName     String          @db.VarChar(256)
  startDate        DateTime        @db.DateTime(3)
  type             ExperienceType?
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String

  @@index([organizationName])
  @@index([userId])
}

enum CodeLanguage {
  Go
  GraphQL
  HTML
  JavaScript
  Python
  SCSS
  SQL
  TypeScript
  YAML
}

model CodeExample {
  id             String                 @id @default(cuid())
  activities     UserActivity[]
  author         User                   @relation(fields: [authorName], references: [name], onDelete: Cascade)
  authorName     String                 @db.VarChar(128)
  comments       Comment[]
  content        String                 @db.VarChar(4096)
  createdAt      DateTime               @default(now()) @db.DateTime(6)
  description    String?                @db.VarChar(512)
  language       CodeLanguage
  notifications  Notification[]
  primarySkill   Skill                  @relation(fields: [primarySkillId], references: [id], onDelete: Cascade)
  primarySkillId String
  skills         SkillsOnCodeExamples[]
  title          String                 @db.VarChar(128)
  updatedAt      DateTime               @updatedAt @db.DateTime(6)
  upvoters       CodeExampleUpvoter[]
  urlSlug        String                 @db.VarChar(128)

  @@unique([authorName, title])
  @@unique([authorName, urlSlug])
  @@index([authorName])
  @@index([primarySkillId])
}

model CodeExampleUpvoter {
  id            String      @id @default(cuid())
  codeExample   CodeExample @relation(fields: [codeExampleId], references: [id], onDelete: Cascade)
  codeExampleId String
  // Whether this is an upvote. If false, this is a downvote instead
  upvote        Boolean     @default(true)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  @@unique([codeExampleId, userId])
  @@index([codeExampleId])
  @@index([userId])
}
