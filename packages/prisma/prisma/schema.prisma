// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

generator erd {
  provider = "prisma-erd-generator"
  theme    = "default"
  output   = "../ERD.svg"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../docs"
}

model Account {
  access_token       String?
  expires_at         Int?
  id                 String  @id @default(cuid())
  id_token           String?
  provider           String
  providerAccountId  String
  oauth_token        String?
  oauth_token_secret String?
  refresh_token      String?
  scope              String?
  session_state      String?
  token_type         String?
  type               String
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String

  @@unique([provider, providerAccountId])
}

model Session {
  expires      DateTime
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model VerificationToken {
  expires    DateTime
  identifier String
  token      String   @unique

  @@unique([identifier, token])
}

model User {
  accounts        Account[]
  activities      UserActivity[]
  chats           ChatsOnUsers[]
  chatMessages    ChatMessage[]
  comments        Comment[]
  // When this account was registered
  createdAt       DateTime               @default(now())
  description     String?
  desiredSkills   DesiredSkillsOnUsers[]
  email           String                 @unique
  emailVerified   DateTime?
  experiences     Experience[]
  followedBy      FollowUser[]           @relation("FollowingUser")
  followingSkill  FollowSkill[]
  followingUser   FollowUser[]           @relation("FollowerUser")
  friendedBy      Friendship[]           @relation("FriendingUser")
  friending       Friendship[]           @relation("FrienderUser")
  id              String                 @id @default(cuid())
  // Avatar image, pulled from GitHub
  image           String?
  // The GitHub name of the user
  name            String                 @unique
  posts           Post[]                 @relation("PostAuthor")
  repositories    Repository[]
  // Self written summary or description
  sessions        Session[]
  skills          SkillsOnUsers[]
  updatedAt       DateTime               @updatedAt
  upvotedComments CommentUpvoter[]
  upvotedPosts    PostUpvoter[]
}

enum UserActivityType {
  CommentPost
  FollowSkill
  FollowUser
  FriendAcceptUser
  Joined
  PublishPost
  UpvotePost
}

model UserActivity {
  id           String           @id @default(cuid())
  comment      Comment?         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId    String?
  createdAt    DateTime         @default(now())
  follow       Follow?          @relation(fields: [followId], references: [id], onDelete: Cascade)
  followId     String?
  friendship   Friendship?      @relation(fields: [friendshipId], references: [id], onDelete: Cascade)
  friendshipId String?
  post         Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String?
  type         UserActivityType
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

// These are uni-directional match requests. If matched 2-way, then it is a confirmed match.
model Friendship {
  id          String         @id @default(cuid())
  activities  UserActivity[]
  friender    User           @relation("FrienderUser", fields: [frienderId], references: [id], onDelete: Cascade)
  frienderId  String
  friending   User           @relation("FriendingUser", fields: [friendingId], references: [id], onDelete: Cascade)
  friendingId String
  rejected    Boolean        @default(false)
  updatedAt   DateTime       @updatedAt

  @@unique([frienderId, friendingId])
}

model Follow {
  id             String         @id @default(cuid())
  activities     UserActivity[]
  createdAt      DateTime       @default(now())
  followingSkill FollowSkill?
  followingUser  FollowUser?
}

// These are uni-directional follows. If matched 2-way, then the users are following each-other.
model FollowUser {
  id          String @id @default(cuid())
  follow      Follow @relation(fields: [followId], references: [id], onDelete: Cascade)
  followId    String @unique
  follower    User   @relation("FollowerUser", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("FollowingUser", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@unique([followerId, followingId])
}

model FollowSkill {
  id          String @id @default(cuid())
  follow      Follow @relation(fields: [followId], references: [id], onDelete: Cascade)
  followId    String @unique
  follower    User   @relation(fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   Skill  @relation(fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@unique([followerId, followingId])
}

model Chat {
  id       String         @id @default(cuid())
  messages ChatMessage[]
  users    ChatsOnUsers[]
}

model ChatMessage {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  content   Json
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String
  createdAt DateTime @default(now())
}

model ChatsOnUsers {
  id     String @id @default(cuid())
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([chatId, userId])
}

model Post {
  activities   UserActivity[]
  author       User            @relation(name: "PostAuthor", fields: [authorName], references: [name], onDelete: Cascade)
  authorName   String
  comments     Comment[]
  content      Json?
  createdAt    DateTime        @default(now())
  description  String?
  id           String          @id @default(cuid())
  images       PostImage[]
  publishedAt  DateTime?
  // Estimated time in minutes to read this post
  readTime     Int?
  skills       SkillsOnPosts[]
  title        String?
  thumbnailUrl String?
  updatedAt    DateTime        @updatedAt
  upvoters     PostUpvoter[]
  urlSlug      String          @default("draft")

  @@unique([authorName, urlSlug])
}

model PostUpvoter {
  id     String  @id @default(cuid())
  post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  // Whether this is an upvote. If false, this is a downvote instead
  upvote Boolean @default(true)
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId, postId])
}

model PostImage {
  id        String   @id
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  url       String   @unique
  createdAt DateTime @default(now())
}

model Comment {
  id         String           @id @default(cuid())
  activities UserActivity[]
  author     User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  content    Json?
  createdAt  DateTime         @default(now())
  parent     Comment?         @relation("CommentReplies", fields: [parentId], references: [id])
  parentId   String?
  post       Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String?
  replies    Comment[]        @relation("CommentReplies")
  updatedAt  DateTime         @updatedAt
  upvoters   CommentUpvoter[]
}

model CommentUpvoter {
  id        String  @id @default(cuid())
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  // Whether this is an upvote. If false, this is a downvote instead
  upvote    Boolean @default(true)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([commentId, userId])
}

model Skill {
  id            String                 @id @default(cuid())
  name          String
  owner         String
  users         SkillsOnUsers[]
  desiringUsers DesiredSkillsOnUsers[]
  posts         SkillsOnPosts[]
  repositories  SkillsOnRepositories[]
  followedBy    FollowSkill[]

  @@unique([name, owner])
}

model SkillsOnPosts {
  id      String @id @default(cuid())
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId String


  @@unique([skillId, postId])
}

model SkillsOnUsers {
  id      String @id @default(cuid())
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@unique([skillId, userId])
}

model DesiredSkillsOnUsers {
  id      String @id @default(cuid())
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@unique([skillId, userId])
}

model Repository {
  id     String                 @id @default(cuid())
  name   String
  skills SkillsOnRepositories[]
  user   User                   @relation(fields: [owner], references: [name], onDelete: Cascade)
  owner  String

  @@unique([name, owner])
}

model SkillsOnRepositories {
  id           String     @id @default(cuid())
  skill        Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId      String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String

  @@unique([skillId, repositoryId])
}

model Organization {
  id          String       @id @default(cuid())
  name        String       @unique
  experiences Experience[]
}

enum ExperienceType {
  FullTime
  PartTime
  Contract
  Intern
  OpenSource
}

model Experience {
  id               String          @id @default(cuid())
  // When this experience was ended. Null is assumed as present.
  endDate          DateTime?
  highlights       String[]
  location         String?
  organization     Organization    @relation(fields: [organizationName], references: [name], onDelete: Cascade)
  organizationName String
  positionName     String
  startDate        DateTime
  type             ExperienceType?
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
}
