# The `BigInt` scalar type represents non-fractional signed whole numeric values.
# @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
scalar BigInt

# The `Byte` scalar type represents byte value as a Buffer
scalar Bytes

type Comment {
  author: User!
  content: String!
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
}

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# An arbitrary-precision Decimal type
scalar Decimal

input EnumExperienceTypeNullableFilter {
  equals: ExperienceType
  in: [ExperienceType!]
  notIn: [ExperienceType!]
}

type Experience {
  endDate: DateTime
  highlights: [String!]!
  id: Int!
  location: String
  organization: Organization!
  organizationName: String!
  positionName: String
  startDate: DateTime!
  type: ExperienceType
  user: User!
}

# Relay-style connection for Experience types.
type ExperienceConnection {
  edges: [ExperienceEdge!]!
  nodes: [Experience!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ExperienceCreateInput {
  endDate: DateTime
  highlights: [String!]
  location: String
  organizationName: String!
  positionName: String
  startDate: DateTime
  type: ExperienceType
}

# Relay-style edge for Experience types.
type ExperienceEdge {
  cursor: String!
  node: Experience!
}

input ExperienceOrderByInput {
  endDate: SortOrder
  startDate: SortOrder
}

enum ExperienceType {
  Contract
  FullTime
  Intern
  OpenSource
  PartTime
}

input ExperienceUpdateInput {
  endDate: DateTime
  highlights: [String!]
  location: String
  organizationName: String
  positionName: String
  startDate: DateTime
  type: ExperienceType
}

input ExperienceWhereInput {
  organizationName: StringNullableFilter
  positionName: StringNullableFilter
  type: EnumExperienceTypeNullableFilter
  user: UserWhereInput
  userId: String
}

input ExperienceWhereUniqueInput {
  id: Int!
}

type GitHubOrganization implements GitHubRepositoryOwner {
  avatarUrl: URL!
  description: String
  id: String!
  login: String!
  name: String
  organization: Organization!
  url: URL!
}

type GitHubRepository {
  description: String
  id: String!
  name: String!
  owner: GitHubRepositoryOwner!
  url: URL!
}

interface GitHubRepositoryOwner {
  avatarUrl: URL!
  id: String!
  login: String!
  url: URL!
}

# Data for a user from that user's connected GitHub account.
type GitHubUser implements GitHubRepositoryOwner {
  avatarUrl: URL!
  bio: String
  company: String
  id: String!
  login: String!
  name: String
  topLanguages: TopLanguages!
  twitterUsername: String
  url: URL!
  user: User!
  websiteUrl: String
}

# The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

# Root mutation type
type Mutation {
  createExperience(data: ExperienceCreateInput!): Experience!

  # Creates a new draft if the user doesn't have a draft pending to be published already
  createPost: Post!

  # Users can delete their own experiences.
  deleteExperience(where: ExperienceWhereUniqueInput!): Experience!

  # Users can delete their own posts.
  deletePost(where: PostWhereUniqueInput!): Post!
  ok: Boolean!
  publishPost(data: PostPublishInput, where: PostWhereUniqueInput!): Post!
  removePostThumbnail(where: PostWhereUniqueInput!): Post
  updateDesiredSkills(data: UpdateDesiredSkillsInput!): User
  updateExperience(data: ExperienceUpdateInput!, where: ExperienceWhereUniqueInput!): Experience
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updatePostDraft(data: PostDraftUpdateInput!, where: PostWhereUniqueInput!): Post
  updateSkills(data: UpdateSkillsInput!): User
  uploadPostImage(data: UploadPostImageInput!, where: PostWhereUniqueInput!): PostImage!
  upvotePost(where: PostWhereUniqueInput!): Post!
  viewer: User
}

type Organization {
  experiences: [Experience!]!
  github: GitHubOrganization!
  id: Int!
  name: String!
}

# Page info for relay-style pagination connections.
type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post {
  author: User!
  authorName: String!
  content: Json
  createdAt: DateTime!
  description: String
  id: Int!
  images: [PostImage!]!
  publishedAt: DateTime
  thumbnailUrl: String
  title: String
  updatedAt: DateTime!
  upvoteCount: Int!
  upvotingUsers(skip: Int = 0, take: Int = 50): [User!]!
  urlSlug: String!
  viewerUpvoted: Boolean!
}

input PostAuthorNameUrlSlugCompoundUniqueInput {
  authorName: String!
  urlSlug: String!
}

# Relay-style connection for Post types.
type PostConnection {
  edges: [PostEdge!]!
  nodes: [Post!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PostDraftUpdateInput {
  content: Json
  description: String
  thumbnailUrl: String
  title: String
}

# Relay-style edge for Post types.
type PostEdge {
  cursor: String!
  node: Post!
}

type PostImage {
  id: ID!
  post: Post!
  postId: Int!
  url: String!
}

input PostPublishInput {
  content: Json
  description: String
  thumbnailUrl: String
  title: String
}

input PostUpdateInput {
  content: Json
  description: String
  thumbnailUrl: String
}

input PostWhereInput {
  author: UserWhereInput
}

input PostWhereUniqueInput {
  authorName_urlSlug: PostAuthorNameUrlSlugCompoundUniqueInput

  # The id of the post to retrieve
  id: Int
}

# Root query type
type Query {
  experiences(after: String, before: String, first: Int, orderBy: ExperienceOrderByInput, where: ExperienceWhereInput!): ExperienceConnection!
  ok: Boolean!

  # A user-created post.
  post(where: PostWhereUniqueInput!): Post
  postDraft: Post

  # Relay-style connection on Post types.
  posts(after: String, before: String, first: Int, last: Int, where: PostWhereInput): PostConnection!
  suggestExperiences(first: Int, where: SuggestExperiencesWhereInput!): SuggestExperiences!
  suggestSkills(first: Int, where: SuggestSkillsWhereInput!): SuggestSkills!
  user(where: UserWhereUniqueInput!): User
  viewer: User
}

type Skill {
  desiringUsers: [User!]!
  id: Int!
  name: String!
  owner: String!
  users: [User!]!
}

input SkillNameOwnerCompoundUniqueInput {
  name: String!
  owner: String!
}

input SkillWhereUniqueInput {
  id: Int
  name_owner: SkillNameOwnerCompoundUniqueInput
}

enum SortOrder {
  Asc
  Desc
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  in: [String!]
  notIn: [String!]
  startsWith: String
}

type SuggestExperiences {
  nodes: [GitHubOrganization!]!
  totalCount: Int!
}

input SuggestExperiencesWhereInput {
  name: String!
}

type SuggestSkills {
  nodes: [GitHubRepository!]!
  totalCount: Int!
}

input SuggestSkillsWhereInput {
  name: String!
  owner: String!
}

# One of the most used languages by a user
type TopLanguage {
  # The color of the language, defined by GitHub
  color: String!

  # The name of the language.
  name: String!

  # The sum of number of bytes written across all owned repositories in this language.
  size: Int!
}

# The most used languages by a user, determined by number of bytes written to repositories owned by the user on GitHub.
type TopLanguages {
  nodes: [TopLanguage!]!

  # The total number of languages across all owned repositories.
  totalCount: Int!

  # The total number of bytes written across all owned repositories across all languages.
  totalSize: Int!
}

# A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
scalar URL

input UpdateDesiredSkillsInput {
  skills: [SkillWhereUniqueInput!]!
}

input UpdateSkillsInput {
  skills: [SkillWhereUniqueInput!]!
}

# The `Upload` scalar type represents a file upload.
scalar Upload

input UploadPostImageInput {
  # The file of the image to be uploaded
  image: Upload!
}

type User {
  comments: [Comment!]!
  description: String
  desiredSkills: [Skill!]!
  email: String!
  experiences: [Experience!]!
  github: GitHubUser!
  githubUrl: URL!
  id: ID!
  image: String
  name: String!
  posts: [Post!]!
  skills: [Skill!]!
  upvotedPosts: [Post!]!
}

input UserWhereInput {
  name: StringNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  name: String
}
