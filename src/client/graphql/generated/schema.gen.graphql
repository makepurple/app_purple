# The `BigInt` scalar type represents non-fractional signed whole numeric values.
# @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
scalar BigInt

# The `Byte` scalar type represents byte value as a Buffer
scalar Bytes

type Comment {
  author: User!
  content: String!
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
}

input CreatePresignedS3UrlInput {
  fileName: String!
  fileType: String!
}

type CreatePresignedS3UrlPayload {
  fields: Json!
  url: String!
}

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# An arbitrary-precision Decimal type
scalar Decimal

type Experience {
  actions: [String!]!
  endDate: DateTime
  id: Int!
  location: String
  organizationName: String
  positionName: String
  startDate: DateTime
  type: ExperienceType
  user: User!
}

enum ExperienceType {
  Contract
  FullTime
  Intern
  Misc
  OpenSource
  PartTime
}

# The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

# Root mutation type
type Mutation {
  createPost: Post!
  createPresignedS3Url(data: CreatePresignedS3UrlInput!): CreatePresignedS3UrlPayload!

  # User can delete their own post.
  deletePost(where: PostWhereUniqueInput!): Post!
  ok: Boolean!
  publishPost(where: PostWhereUniqueInput!): Post!
  updateDesiredSkills(input: UpdateDesiredSkillsInput!): User!
  updateSkills(input: UpdateSkillsInput!): User!
  uploadPostImage(data: UploadPostImageInput!, where: PostWhereUniqueInput!): PostImage!
  upvotePost(where: PostWhereUniqueInput!): Post!
  viewer: User
}

# Page info for relay-style pagination connections.
type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post {
  author: User!
  authorId: String!
  content: Json
  createdAt: DateTime!
  description: String
  id: Int!
  images: [PostImage!]!
  publishedAt: DateTime
  thumbnailUrl: String
  title: String
  updatedAt: DateTime!
  upvoteCount: Int!
  upvotingUsers(skip: Int = 0, take: Int = 50): [User!]!
  urlSlug: String!
  viewerUpvoted: Boolean!
}

# Relay-style connection for Post types.
type PostConnection {
  edges: [PostEdge!]!
  nodes: [Post!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

# Relay-style edge for Post types.
type PostEdge {
  cursor: String!
  node: Post!
}

type PostImage {
  id: ID!
  post: Post!
  postId: Int!
  url: String!
}

input PostWhereInput {
  author: UserWhereInput
  authorId: String
}

input PostWhereUniqueInput {
  # The id of the post to retrieve
  id: Int
}

# Root query type
type Query {
  ok: Boolean!

  # A user-created post.
  post(where: PostWhereUniqueInput!): Post

  # Relay-style connection on Post types.
  posts(after: String, before: String, first: Int, last: Int, where: PostWhereInput): PostConnection!
  user(where: UserWhereUniqueInput!): User
  viewer: User
}

type Skill {
  id: Int!
  name: String!
  users: [User!]!
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  in: [String!]
  notIn: [String!]
  startsWith: String
}

# One of the most used languages by a user
type TopLanguage {
  # The color of the language, defined by GitHub
  color: String!

  # The name of the language.
  name: String!

  # The sum of number of bytes written across all owned repositories in this language.
  size: Int!
}

# The most used languages by a user, determined by number of bytes written to repositories owned by the user on GitHub.
type TopLanguages {
  nodes: [TopLanguage!]!

  # The total number of languages across all owned repositories.
  totalCount: Int!

  # The total number of bytes written across all owned repositories across all languages.
  totalSize: Int!
}

# A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
scalar URL

input UpdateDesiredSkillsInput {
  # List of skills (by name) to add to the user.
  skills: [String!]!
}

input UpdateSkillsInput {
  # List of skills (by name) to add to the user.
  skills: [String!]!
}

# The `Upload` scalar type represents a file upload.
scalar Upload

input UploadPostImageInput {
  # Set a custom filename when uploading to cloudinary. This will overwrite any file that exists under this filename.
  fileName: String

  # The file of the image to be uploaded
  image: Upload!
}

type User {
  comments: [Comment!]!
  desiredSkills: [Skill!]!
  email: String!
  github: UserGitHub!
  githubUrl: URL!
  id: ID!
  image: String
  name: String!
  posts: [Post!]!
  skills: [Skill!]!
  upvotedPosts: [Post!]!
}

# Data for a user from that user's connected GitHub account.
type UserGitHub {
  bio: String
  company: String
  name: String
  topLanguages: TopLanguages!
  twitterUsername: String

  # The URL of the user's GitHub profile.
  url: URL!
  user: User!
  websiteUrl: String
}

input UserWhereInput {
  name: StringNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  name: String
}
