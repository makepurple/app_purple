### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

type Comment {
  author: User!
  content: String!
  createdAt: DateTime!
  id: Int!
  post: Post!
  updatedAt: DateTime!
}

input CreatePresignedS3UrlInput {
  fileName: String!
  fileType: String!
}

type CreatePresignedS3UrlPayload {
  fields: Json!
  url: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

type Experience {
  actions: [String!]!
  endDate: DateTime
  id: Int!
  location: String
  organizationName: String
  positionName: String
  startDate: DateTime
  type: ExperienceType
  user: User!
}

enum ExperienceType {
  Contract
  FullTime
  Intern
  Misc
  OpenSource
  PartTime
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""Root mutation type"""
type Mutation {
  createPost: Post!
  createPresignedS3Url(data: CreatePresignedS3UrlInput!): CreatePresignedS3UrlPayload!
  ok: Boolean!
  updateDesiredSkills(input: UpdateDesiredSkillsInput!): User!
  updateSkills(input: UpdateSkillsInput!): User!
  uploadPostImage(data: UploadPostImageInput!, where: PostWhereUniqueInput!): PostImage!
  viewer: User
}

type Post {
  author: User!
  authorId: String!
  comments: [Comment!]!
  content: Json
  createdAt: DateTime!
  id: Int!
  images: [PostImage!]!
  publishedAt: DateTime
  thumbnailUrl: String
  title: String
  updatedAt: DateTime!
}

type PostImage {
  id: ID!
  post: Post!
  postId: Int!
}

input PostWhereUniqueInput {
  """The id of the post to retrieve"""
  id: Int
}

"""Root query type"""
type Query {
  ok: Boolean!

  """A user-created post."""
  post(where: PostWhereUniqueInput!): Post
  user(where: UserWhereUniqueInput!): User
  viewer: User
}

type Skill {
  id: Int!
  name: String!
  users: [User!]!
}

"""One of the most used languages by a user"""
type TopLanguage {
  """The color of the language, defined by GitHub"""
  color: String!

  """The name of the language."""
  name: String!

  """
  The sum of number of bytes written across all owned repositories in this language.
  """
  size: Int!
}

"""
The most used languages by a user, determined by number of bytes written to repositories owned by the user on GitHub.
"""
type TopLanguages {
  nodes: [TopLanguage!]!

  """The total number of languages across all owned repositories."""
  totalCount: Int!

  """
  The total number of bytes written across all owned repositories across all languages.
  """
  totalSize: Int!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

input UpdateDesiredSkillsInput {
  """List of skills (by name) to add to the user."""
  skills: [String!]!
}

input UpdateSkillsInput {
  """List of skills (by name) to add to the user."""
  skills: [String!]!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadPostImageInput {
  """The file of the image to be uploaded"""
  image: Upload!
}

type User {
  comments: [Comment!]!
  desiredSkills: [Skill!]!
  email: String!
  github: UserGitHub!
  githubUrl: URL!
  id: ID!
  image: String
  name: String!
  posts: [Post!]!
  skills: [Skill!]!
}

"""Data for a user from that user's connected GitHub account."""
type UserGitHub {
  bio: String
  company: String
  topLanguages: TopLanguages
  twitterUsername: String

  """The URL of the user's GitHub profile."""
  url: URL!
  user: User!
  websiteUrl: String
}

input UserWhereUniqueInput {
  email: String
  id: String
  name: String
}
