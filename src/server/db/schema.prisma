// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

enum AuthProvider {
  github
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       AuthProvider
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  skills        SkillsOnUsers[]
  desiredSkills DesiredSkillsOnUsers[]

  @@map(name: "users")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Post {
  id                Int       @id @default(autoincrement())
  author            User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId          String
  title             String
  // Content stored as Markdown
  content           String
  thumbnailImageUrl String?
  comments          Comment[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id            Int                    @id @default(autoincrement())
  name          String                 @unique
  users         SkillsOnUsers[]
  desiringUsers DesiredSkillsOnUsers[]
}

model SkillsOnUsers {
  skill     Skill  @relation(fields: [skillName], references: [name], onDelete: Cascade)
  skillName String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@id([skillName, userId])
}

model DesiredSkillsOnUsers {
  skill     Skill  @relation(fields: [skillName], references: [name], onDelete: Cascade)
  skillName String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@id([skillName, userId])
}
