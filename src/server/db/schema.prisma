// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String                 @id @default(cuid())
  // The GitHub name of the user
  name          String                 @unique
  email         String                 @unique
  emailVerified DateTime?
  // Avatar image, pulled from GitHub
  image         String?
  // Self written summary or description
  description   String?
  // When this account was registered
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  accounts      Account[]
  sessions      Session[]
  posts         Post[]                 @relation("PostAuthor")
  comments      Comment[]
  skills        SkillsOnUsers[]
  desiredSkills DesiredSkillsOnUsers[]
  experiences   Experience[]
  upvotedPosts  PostUpvoter[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  author       User          @relation(name: "PostAuthor", fields: [authorName], references: [name], onDelete: Cascade)
  authorName   String
  content      Json?
  createdAt    DateTime      @default(now())
  description  String?
  id           Int           @id @default(autoincrement())
  images       PostImage[]
  publishedAt  DateTime?
  title        String?
  urlSlug      String        @default("draft")
  thumbnailUrl String?
  updatedAt    DateTime      @updatedAt
  upvotes      PostUpvoter[]

  @@unique([authorName, urlSlug])
}

model PostUpvoter {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@id([userId, postId])
}

model PostImage {
  id        String   @id
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  url       String   @unique
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id            Int                    @id @default(autoincrement())
  name          String
  owner         String
  users         SkillsOnUsers[]
  desiringUsers DesiredSkillsOnUsers[]

  @@unique([name, owner])
}

model SkillsOnUsers {
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@id([skillId, userId])
}

model DesiredSkillsOnUsers {
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@id([skillId, userId])
}

enum ExperienceType {
  FullTime
  PartTime
  Contract
  Intern
  OpenSource
  Misc
}

model Experience {
  id               Int             @id @default(autoincrement())
  // When this experience was ended. Null is assumed as present.
  endDate          DateTime?
  highlights       String[]
  location         String?
  organizationName String
  positionName     String?
  startDate        DateTime?
  type             ExperienceType?
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
}
