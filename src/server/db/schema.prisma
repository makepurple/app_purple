// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String                 @id @default(cuid())
  // The GitHub name of the user
  name          String                 @unique
  email         String                 @unique
  emailVerified DateTime?
  // Avatar image, pulled from GitHub
  image         String?
  // Self written summary or description
  summary       String?
  // When this account was registered
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  accounts      Account[]
  sessions      Session[]
  posts         Post[]                 @relation("PostAuthor")
  comments      Comment[]
  skills        SkillsOnUsers[]
  desiredSkills DesiredSkillsOnUsers[]
  experiences   Experience[]
  upvotedPosts  PostUpvoter[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Post {
  author       User          @relation(name: "PostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  comments     Comment[]
  content      Json?
  createdAt    DateTime      @default(now())
  description  String?
  id           Int           @id @default(autoincrement())
  images       PostImage[]
  publishedAt  DateTime?
  title        String?
  urlSlug      String        @default("draft")
  thumbnailUrl String?
  updatedAt    DateTime      @updatedAt
  upvotes      PostUpvoter[]

  @@unique([authorId, urlSlug])
}

model PostUpvoter {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@id([userId, postId])
}

model PostImage {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id            Int                    @id @default(autoincrement())
  name          String                 @unique
  users         SkillsOnUsers[]
  desiringUsers DesiredSkillsOnUsers[]
}

model SkillsOnUsers {
  skill     Skill  @relation(fields: [skillName], references: [name], onDelete: Cascade)
  skillName String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@id([skillName, userId])
}

model DesiredSkillsOnUsers {
  skill     Skill  @relation(fields: [skillName], references: [name], onDelete: Cascade)
  skillName String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@id([skillName, userId])
}

enum ExperienceType {
  FullTime
  PartTime
  Contract
  Intern
  OpenSource
  Misc
}

model Experience {
  id               Int             @id @default(autoincrement())
  // The name of the position
  positionName     String?
  // The type of experience
  type             ExperienceType?
  // The name of the organization (can also be the name of a collaboration i.e. project)
  organizationName String?
  // When this experience was started
  startDate        DateTime?
  // When this experience was ended. Null is assumed as present.
  endDate          DateTime?
  // Where this experience took place
  location         String?
  // Things that the user has done in this experience
  actions          String[]
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
}
