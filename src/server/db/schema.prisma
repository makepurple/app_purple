// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

enum AuthProvider {
  GitHub
}

model User {
  id               String          @id @default(cuid())
  email            String          @unique
  username         String
  profileGitHubUrl String?
  profileImageUrl  String?
  provider         AuthProvider    @default(GitHub)
  posts            Post[]
  comments         Comment[]
  skills           SkillsOnUsers[]
}

model Post {
  id                Int       @id @default(autoincrement())
  author            User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId          String
  title             String
  // Content stored as Markdown
  content           String
  thumbnailImageUrl String?
  comments          Comment[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id    Int             @id @default(autoincrement())
  name  String          @unique
  users SkillsOnUsers[]
}

model SkillsOnUsers {
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@id([skillId, userId])
}
